import { useState, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { 
  Github, 
  Upload, 
  CheckCircle, 
  AlertCircle, 
  ExternalLink,
  Download,
  Play,
  Clock,
  GitBranch
} from "lucide-react";

interface Repository {
  id: number;
  name: string;
  full_name: string;
  description: string;
  html_url: string;
  updated_at: string;
}

interface WorkflowRun {
  id: number;
  status: string;
  conclusion: string;
  workflow_id: number;
  html_url: string;
  created_at: string;
}

export function DeployPage() {
  const [repos, setRepos] = useState<Repository[]>([]);
  const [selectedRepo, setSelectedRepo] = useState<Repository | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [deployStatus, setDeployStatus] = useState<string>("");
  const [buildStatus, setBuildStatus] = useState<WorkflowRun[]>([]);
  
  // Deploy form state
  const [repoName, setRepoName] = useState("");
  const [commitMessage, setCommitMessage] = useState("AI App Builder update");
  const [codeContent, setCodeContent] = useState(`import React from 'react';

function App() {
  return (
    <div style={{ padding: '20px', textAlign: 'center' }}>
      <h1>Welcome to My AI-Generated App!</h1>
      <p>This app was created with AI App Builder</p>
      <button style={{
        backgroundColor: '#3B82F6',
        color: 'white',
        padding: '10px 20px',
        border: 'none',
        borderRadius: '5px',
        cursor: 'pointer'
      }}>
        Get Started
      </button>
    </div>
  );
}

export default App;`);

  // Load user repositories
  useEffect(() => {
    const fetchRepos = async () => {
      try {
        const response = await fetch("/api/github/repos");
        const data = await response.json();
        if (data.status === "success") {
          setRepos(data.repos);
        }
      } catch (error) {
        console.error("Failed to fetch repositories:", error);
      }
    };

    fetchRepos();
  }, []);

  // Create new repository
  const handleCreateRepo = async () => {
    if (!repoName.trim()) return;
    
    setIsLoading(true);
    try {
      const response = await fetch("/api/github/create-repo", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          name: repoName,
          description: "Generated by AI App Builder"
        })
      });

      const data = await response.json();
      if (data.status === "success") {
        setDeployStatus("Repository created successfully!");
        setRepos([data.repo, ...repos]);
        setSelectedRepo(data.repo);
        setRepoName("");
      } else {
        setDeployStatus(`Error: ${data.error}`);
      }
    } catch (error) {
      setDeployStatus("Failed to create repository");
    }
    setIsLoading(false);
  };

  // Deploy code to selected repository
  const handleDeploy = async () => {
    if (!selectedRepo) return;

    setIsLoading(true);
    try {
      const [owner, repo] = selectedRepo.full_name.split("/");
      
      const response = await fetch("/api/github/deploy", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          owner,
          repo,
          path: "src/App.jsx",
          content: codeContent,
          message: commitMessage
        })
      });

      const data = await response.json();
      if (data.status === "success") {
        setDeployStatus("Code deployed successfully!");
        // Refresh build status
        await fetchBuildStatus(owner, repo);
      } else {
        setDeployStatus(`Error: ${data.error}`);
      }
    } catch (error) {
      setDeployStatus("Failed to deploy code");
    }
    setIsLoading(false);
  };

  // Fetch build status for repository
  const fetchBuildStatus = async (owner: string, repo: string) => {
    try {
      const response = await fetch(`/api/github/build-status/${owner}/${repo}`);
      const data = await response.json();
      if (data.status === "success") {
        setBuildStatus(data.workflows);
      }
    } catch (error) {
      console.error("Failed to fetch build status:", error);
    }
  };

  const getStatusIcon = (status: string, conclusion: string) => {
    if (status === "completed") {
      return conclusion === "success" ? 
        <CheckCircle className="w-4 h-4 text-green-500" /> :
        <AlertCircle className="w-4 h-4 text-red-500" />;
    }
    return <Clock className="w-4 h-4 text-yellow-500" />;
  };

  return (
    <div className="h-screen bg-gray-50 overflow-auto">
      <div className="container mx-auto p-6 max-w-6xl">
        <div className="mb-8">
          <div className="flex items-center gap-3 mb-4">
            <Github className="w-8 h-8 text-gray-800" />
            <h1 className="text-3xl font-bold">Deploy to GitHub</h1>
          </div>
          <p className="text-gray-600">
            Push your generated code to GitHub and trigger automated builds for iOS and Android.
          </p>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          {/* Repository Selection */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <GitBranch className="w-5 h-5" />
                Repository
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              {/* Create New Repository */}
              <div className="space-y-2">
                <Label>Create New Repository</Label>
                <div className="flex gap-2">
                  <Input
                    placeholder="repository-name"
                    value={repoName}
                    onChange={(e) => setRepoName(e.target.value)}
                  />
                  <Button onClick={handleCreateRepo} disabled={isLoading}>
                    Create
                  </Button>
                </div>
              </div>

              {/* Select Existing Repository */}
              <div className="space-y-2">
                <Label>Or Select Existing Repository</Label>
                <div className="max-h-60 overflow-auto space-y-2">
                  {repos.map((repo) => (
                    <Card
                      key={repo.id}
                      className={`cursor-pointer transition-colors ${
                        selectedRepo?.id === repo.id ? 'ring-2 ring-blue-500' : ''
                      }`}
                      onClick={() => setSelectedRepo(repo)}
                    >
                      <CardContent className="p-3">
                        <div className="flex items-center justify-between">
                          <div>
                            <h4 className="font-medium">{repo.name}</h4>
                            <p className="text-sm text-gray-500 truncate">
                              {repo.description || "No description"}
                            </p>
                          </div>
                          <Button
                            variant="ghost"
                            size="sm"
                            onClick={(e) => {
                              e.stopPropagation();
                              window.open(repo.html_url, '_blank');
                            }}
                          >
                            <ExternalLink className="w-4 h-4" />
                          </Button>
                        </div>
                      </CardContent>
                    </Card>
                  ))}
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Code Editor */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Upload className="w-5 h-5" />
                Code to Deploy
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="space-y-2">
                <Label>Commit Message</Label>
                <Input
                  value={commitMessage}
                  onChange={(e) => setCommitMessage(e.target.value)}
                />
              </div>

              <div className="space-y-2">
                <Label>Code Content</Label>
                <Textarea
                  value={codeContent}
                  onChange={(e) => setCodeContent(e.target.value)}
                  rows={12}
                  className="font-mono text-sm"
                />
              </div>

              <Button 
                onClick={handleDeploy} 
                disabled={!selectedRepo || isLoading}
                className="w-full"
              >
                <Upload className="w-4 h-4 mr-2" />
                {isLoading ? "Deploying..." : "Deploy to GitHub"}
              </Button>

              {deployStatus && (
                <div className={`p-3 rounded-md text-sm ${
                  deployStatus.includes("Error") 
                    ? "bg-red-50 text-red-700 border border-red-200"
                    : "bg-green-50 text-green-700 border border-green-200"
                }`}>
                  {deployStatus}
                </div>
              )}
            </CardContent>
          </Card>
        </div>

        {/* Build Status */}
        {selectedRepo && buildStatus.length > 0 && (
          <Card className="mt-6">
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Play className="w-5 h-5" />
                Build Status
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-3">
                {buildStatus.slice(0, 5).map((run) => (
                  <div key={run.id} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                    <div className="flex items-center gap-3">
                      {getStatusIcon(run.status, run.conclusion)}
                      <div>
                        <p className="font-medium">Workflow #{run.id}</p>
                        <p className="text-sm text-gray-500">
                          {new Date(run.created_at).toLocaleDateString()}
                        </p>
                      </div>
                    </div>
                    <div className="flex items-center gap-2">
                      <span className={`px-2 py-1 text-xs rounded-full ${
                        run.conclusion === "success" 
                          ? "bg-green-100 text-green-800"
                          : run.conclusion === "failure"
                          ? "bg-red-100 text-red-800"
                          : "bg-yellow-100 text-yellow-800"
                      }`}>
                        {run.status}
                      </span>
                      <Button
                        variant="ghost"
                        size="sm"
                        onClick={() => window.open(run.html_url, '_blank')}
                      >
                        <ExternalLink className="w-4 h-4" />
                      </Button>
                    </div>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}